#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server);
const roomToMessages = new Map();
const userIdToRoomName = new Map();

io.on("connection", (socket) => {
  console.log("sever-socketID: " + socket.id);

  socket.on("join", (data) => {
    socket.join(data.roomName);
    userIdToRoomName.set(data.userId, data.roomName);

    if (!roomToMessages.has(data.roomName)) {
      roomToMessages.set(data.roomName, []);
      console.log("createRoom");
      io.emit("addRoom", {
        roomName: data.roomName,
        activeNumber: getRoomToActiveNumber(io).get(data.roomName),
      });
    } else {
      io.emit("updateRoom", {
        roomName: data.roomName,
        activeNumber: getRoomToActiveNumber(io).get(data.roomName),
      });
    }

    io.to(data.roomName).emit("addMember", {
      userId: data.userId,
      messages: roomToMessages.get(data.roomName),
      activeNumber: getRoomToActiveNumber(io).get(data.roomName),
    });
  });

  socket.on("chat message", (data) => {
    roomToMessages
      .get(data.roomName)
      .push({ userName: data.userName, message: data.message });
    io.to(data.roomName).emit("receive", {
      userId: data.userId,
      userName: data.userName,
      message: data.message,
    });
  });

  socket.on("rooms", () => {
    let rooms = [];
    for (let [roomName, activeNumber] of getRoomToActiveNumber(io)) {
      if (roomName) {
        rooms.push({ roomName: roomName, activeNumber: activeNumber });
      }
    }
    socket.emit("chat-top", { rooms: rooms });
  });

  socket.on("disconnect", () => {
    console.log("アクティブなルーム(処理前)は" + roomToMessages.size);
    for (const room of roomToMessages.keys()) {
      if (!getRoomToActiveNumber(io).has(room)) {
        roomToMessages.delete(room);
      }
    }
    console.log("アクティブなルーム(処理後)は" + roomToMessages.size);

    console.log("disconnect" + socket.id);
    let roomName = userIdToRoomName.get(socket.id);
    userIdToRoomName.delete(socket.id);
    let activeNumber = getRoomToActiveNumber(io).get(roomName);

    if (getRoomToActiveNumber(io).get(roomName)) {
      console.log("activeNumber: " + activeNumber);
      io.to(roomName).emit("updateActiveNumber", {
        activeNumber: activeNumber,
      });

      io.emit("updateRoom", {
        roomName: roomName,
        activeNumber: getRoomToActiveNumber(io).get(roomName),
      });
    } else {
      console.log("deleteRoom");
      io.emit("deleteRoom", { roomName: roomName });
    }
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function getRoomToActiveNumber(io) {
  const arr = Array.from(io.sockets.adapter.rooms);
  const filtered = arr.filter((room) => !room[1].has(room[0]));
  let roomToActiveNumber = new Map();
  for (const room of filtered) {
    roomToActiveNumber.set(room[0], room[1].size);
  }

  return roomToActiveNumber;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
